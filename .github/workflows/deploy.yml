name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error

            echo "🚀 Starting deployment on server..."

            # Ensure deployment directory exists
            sudo mkdir -p /var/www/fastapi-app
            sudo chown $USER:$USER /var/www/fastapi-app
            cd /var/www/fastapi-app

            # Set up SSH for GitHub
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts

            # Clone or update repository
            if [ ! -d ".git" ]; then
              echo "📦 Cloning repository..."
              git clone https://github.com/TobyTCN/fastapi-bookproject.git .
            else
              echo "🔄 Repository exists, pulling latest changes..."
              git fetch origin main
              git reset --hard
            fi

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "🐳 Docker not found, installing..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "🐳 Docker is already installed!"
            fi

            # Fix Docker permission issue
            echo "🔑 Fixing Docker permissions..."
            sudo usermod -aG docker $USER
            sudo chmod 666 /var/run/docker.sock  # Grant access to Docker socket
            
            # Apply changes immediately
            exec sudo su -l $USER

            # Cleanup old Docker containers
            echo "🧹 Cleaning up old Docker containers..."
            docker system prune -f || true

            # Stop running containers (ignore errors if no containers exist)
            docker compose down || true

            # Start the new container
            echo "🚀 Starting new container..."
            docker compose up -d --build

            echo "✅ Deployment complete!"
